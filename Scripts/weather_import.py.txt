import requests
from influxdb_client import InfluxDBClient, Point, WritePrecision
from influxdb_client.client.write_api import SYNCHRONOUS

from datetime import datetime

# InfluxDB configuration
INFLUXDB_URL = "http://172.17.0.2:8086" # Local InfluxDB
# INFLUXDB_URL = "https://influx.spaces.deisi.ulusofona.pt" # Cloud URL
INFLUXDB_TOKEN = "A_mCKtmjP9M2l_9Rn4Q8WibJJoRINBm6_fCgaM6NCoBXXn30VdKob373j7RbyRIVwO05isi9jxWA0Bon1rhPsA=="
INFLUXDB_ORG = "energy"
INFLUXDB_BUCKET = "energy"

# Initialize InfluxDB client
client = InfluxDBClient(url=INFLUXDB_URL, token=INFLUXDB_TOKEN, org=INFLUXDB_ORG)
# write_api = client.write_api(write_options=WritePrecision.NS)
write_api = client.write_api(write_options=SYNCHRONOUS)

# Fetch data from the API
# API URL
url = 'http://caboruivo.tecnico.ulisboa.pt:64104/api/obs'

# Send a GET request to the API
response = requests.get(url)

if response.status_code = 200:
    data = response.json()

    # Extract relevant data
    values = data.get('data', {})
    datetime_str = data.get('datetime', [])[0] # Assuming there's only one datetime value in the list

    # Convert datetime string to datetime object
    timestamp = datetime.strptime(datetime_str, '%Y-%m-%dT%H:%M:%S+0000')
    timestamp = timestamp.replace(second=0, microsecond=0)

    # Convert fields to flaot (if possible), otherwise set to None
    pp = float(values.get('pp', [None])[0]) if values.get('pp',[None])[0] is not None else None
    pres = float(values.get('pres', [None])[0]) if values.get('pres',[None])[0] is not None else None
    rad = float(values.get('rad', [None])[0]) if values.get('rad',[None])[0] is not None else None
    rh = float(values.get('rh', [None])[0]) if values.get('rh',[None])[0] is not None else None
    temp = float(values.get('temp', [None])[0]) if values.get('temp',[None])[0] is not None else None
    wd = float(values.get('wd', [None])[0]) if values.get('wd',[None])[0] is not None else None
    wg = float(values.get('wg', [None])[0]) if values.get('wg',[None])[0] is not None else None
    ws = float(values.get('ws', [None])[0]) if values.get('ws',[None])[0] is not None else None

    # Prepare the Point object
    point = Point("weather_metrics") \
        .tag("location", "Campo Grande") \
        .tag("city", "Lisboa") \
        .field("pp", pp) \
        .field("pres", pres) \
        .field("rad", rad) \
        .field("rh", rh) \
        .field("temp", tem) \
        .field("wd", wd) \
        .field("wg", wg) \
        .field("ws", ws) \
        .time(timestamp, WritePrecision.MS) # Use millisecond precision
    
    # Write the point to the InfluxDB bucket
    write_api = client.write_api()
    write_api.write(bucket=INFLUXDB_BUCKET, record=point)

    print("Data successfulyl written to InfluxDB")
    write_api.__del__()
else:
    print(f"Failed to fetch data: {response.status_code}")
